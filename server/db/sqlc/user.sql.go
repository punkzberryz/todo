// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    hashed_password,
    email
) VALUES (
    $1, $2, $3
) RETURNING id, username, email, hashed_password, password_changed_at, created_at
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashedPassword"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser, arg.Username, arg.HashedPassword, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, hashed_password, password_changed_at, created_at FROM users
WHERE
    id = $1 OR
    email = $2
LIMIT 1
`

type GetUserParams struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, arg.ID, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    username = COALESCE($3, username),
    hashed_password = COALESCE($4, hashed_password),
    password_changed_at = COALESCE($5, password_changed_at),
    email= COALESCE($6, email)           
WHERE id = $1 OR email = $2
RETURNING id, username, email, hashed_password, password_changed_at, created_at
`

type UpdateUserParams struct {
	ID                int64          `json:"id"`
	Email             string         `json:"email"`
	Username          sql.NullString `json:"username"`
	HashedPassword    sql.NullString `json:"hashedPassword"`
	PasswordChangedAt sql.NullTime   `json:"passwordChangedAt"`
	NewEmail          sql.NullString `json:"newEmail"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserStmt, updateUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.NewEmail,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
